{"version":3,"file":"app.D139oGLD.js","sources":["../../../../node_modules/.pnpm/vitepress@1.5.0_@algolia+client-search@5.14.2_postcss@8.4.49_search-insights@2.17.2/node_modules/vitepress/dist/client/app/index.js"],"sourcesContent":["import RawTheme from '@theme/index';\nimport { createApp as createClientApp, createSSRApp, defineComponent, h, onMounted, watchEffect } from 'vue';\nimport { ClientOnly } from './components/ClientOnly';\nimport { Content } from './components/Content';\nimport { useCodeGroups } from './composables/codeGroups';\nimport { useCopyCode } from './composables/copyCode';\nimport { useUpdateHead } from './composables/head';\nimport { usePrefetch } from './composables/preFetch';\nimport { dataSymbol, initData, siteDataRef, useData } from './data';\nimport { RouterSymbol, createRouter, scrollTo } from './router';\nimport { inBrowser, pathToFile } from './utils';\nfunction resolveThemeExtends(theme) {\n    if (theme.extends) {\n        const base = resolveThemeExtends(theme.extends);\n        return {\n            ...base,\n            ...theme,\n            async enhanceApp(ctx) {\n                if (base.enhanceApp)\n                    await base.enhanceApp(ctx);\n                if (theme.enhanceApp)\n                    await theme.enhanceApp(ctx);\n            }\n        };\n    }\n    return theme;\n}\nconst Theme = resolveThemeExtends(RawTheme);\nconst VitePressApp = defineComponent({\n    name: 'VitePressApp',\n    setup() {\n        const { site, lang, dir } = useData();\n        // change the language on the HTML element based on the current lang\n        onMounted(() => {\n            watchEffect(() => {\n                document.documentElement.lang = lang.value;\n                document.documentElement.dir = dir.value;\n            });\n        });\n        if (import.meta.env.PROD && site.value.router.prefetchLinks) {\n            // in prod mode, enable intersectionObserver based pre-fetch\n            usePrefetch();\n        }\n        // setup global copy code handler\n        useCopyCode();\n        // setup global code groups handler\n        useCodeGroups();\n        if (Theme.setup)\n            Theme.setup();\n        return () => h(Theme.Layout);\n    }\n});\nexport async function createApp() {\n    ;\n    globalThis.__VITEPRESS__ = true;\n    const router = newRouter();\n    const app = newApp();\n    app.provide(RouterSymbol, router);\n    const data = initData(router.route);\n    app.provide(dataSymbol, data);\n    // install global components\n    app.component('Content', Content);\n    app.component('ClientOnly', ClientOnly);\n    // expose $frontmatter & $params\n    Object.defineProperties(app.config.globalProperties, {\n        $frontmatter: {\n            get() {\n                return data.frontmatter.value;\n            }\n        },\n        $params: {\n            get() {\n                return data.page.value.params;\n            }\n        }\n    });\n    if (Theme.enhanceApp) {\n        await Theme.enhanceApp({\n            app,\n            router,\n            siteData: siteDataRef\n        });\n    }\n    // setup devtools in dev mode\n    if (import.meta.env.DEV || __VUE_PROD_DEVTOOLS__) {\n        import('./devtools.js').then(({ setupDevtools }) => setupDevtools(app, router, data));\n    }\n    return { app, router, data };\n}\nfunction newApp() {\n    return import.meta.env.PROD\n        ? createSSRApp(VitePressApp)\n        : createClientApp(VitePressApp);\n}\nfunction newRouter() {\n    let isInitialPageLoad = inBrowser;\n    let initialPath;\n    return createRouter((path) => {\n        let pageFilePath = pathToFile(path);\n        let pageModule = null;\n        if (pageFilePath) {\n            if (isInitialPageLoad) {\n                initialPath = pageFilePath;\n            }\n            // use lean build if this is the initial page load or navigating back\n            // to the initial loaded path (the static vnodes already adopted the\n            // static content on that load so no need to re-fetch the page)\n            if (isInitialPageLoad || initialPath === pageFilePath) {\n                pageFilePath = pageFilePath.replace(/\\.js$/, '.lean.js');\n            }\n            if (import.meta.env.DEV) {\n                pageModule = import(/*@vite-ignore*/ pageFilePath).catch(() => {\n                    // try with/without trailing slash\n                    // in prod this is handled in src/client/app/utils.ts#pathToFile\n                    const url = new URL(pageFilePath, 'http://a.com');\n                    const path = (url.pathname.endsWith('/index.md')\n                        ? url.pathname.slice(0, -9) + '.md'\n                        : url.pathname.slice(0, -3) + '/index.md') +\n                        url.search +\n                        url.hash;\n                    return import(/*@vite-ignore*/ path);\n                });\n            }\n            else {\n                pageModule = import(/*@vite-ignore*/ pageFilePath);\n            }\n        }\n        if (inBrowser) {\n            isInitialPageLoad = false;\n        }\n        return pageModule;\n    }, Theme.NotFound);\n}\nif (inBrowser) {\n    createApp().then(({ app, router, data }) => {\n        // wait until page component is fetched before mounting\n        router.go().then(() => {\n            // dynamically update head tags\n            useUpdateHead(router.route, data.site);\n            app.mount('#app');\n            // scroll to hash on new tab during dev\n            if (import.meta.env.DEV && location.hash) {\n                const target = document.getElementById(decodeURIComponent(location.hash).slice(1));\n                if (target) {\n                    scrollTo(target, location.hash);\n                }\n            }\n        });\n    });\n}\n"],"names":["resolveThemeExtends","theme","base","ctx","Theme","RawTheme","VitePressApp","defineComponent","site","lang","dir","useData","onMounted","watchEffect","usePrefetch","useCopyCode","useCodeGroups","h","createApp","router","newRouter","app","newApp","RouterSymbol","data","initData","dataSymbol","Content","ClientOnly","siteDataRef","createSSRApp","isInitialPageLoad","inBrowser","initialPath","createRouter","path","pageFilePath","pathToFile","pageModule","useUpdateHead"],"mappings":"8OAWA,SAASA,EAAoBC,EAAO,CAChC,GAAIA,EAAM,QAAS,CACT,MAAAC,EAAOF,EAAoBC,EAAM,OAAO,EACvC,MAAA,CACH,GAAGC,EACH,GAAGD,EACH,MAAM,WAAWE,EAAK,CACdD,EAAK,YACC,MAAAA,EAAK,WAAWC,CAAG,EACzBF,EAAM,YACA,MAAAA,EAAM,WAAWE,CAAG,CAAA,CAEtC,CAAA,CAEG,OAAAF,CACX,CACA,MAAMG,EAAQJ,EAAoBK,CAAQ,EACpCC,EAAeC,EAAgB,CACjC,KAAM,eACN,OAAQ,CACJ,KAAM,CAAE,KAAAC,EAAM,KAAAC,EAAM,IAAAC,CAAA,EAAQC,EAAQ,EAEpC,OAAAC,EAAU,IAAM,CACZC,EAAY,IAAM,CACL,SAAA,gBAAgB,KAAOJ,EAAK,MAC5B,SAAA,gBAAgB,IAAMC,EAAI,KAAA,CACtC,CAAA,CACJ,EAC2BF,EAAK,MAAM,OAAO,eAE9BM,EAAA,EAGJC,EAAA,EAEEC,EAAA,EACVZ,EAAM,OACNA,EAAM,MAAM,EACT,IAAMa,EAAEb,EAAM,MAAM,CAAA,CAEnC,CAAC,EACD,eAAsBc,GAAY,CAE9B,WAAW,cAAgB,GAC3B,MAAMC,EAASC,EAAU,EACnBC,EAAMC,EAAO,EACfD,EAAA,QAAQE,EAAcJ,CAAM,EAC1B,MAAAK,EAAOC,EAASN,EAAO,KAAK,EAC9B,OAAAE,EAAA,QAAQK,EAAYF,CAAI,EAExBH,EAAA,UAAU,UAAWM,CAAO,EAC5BN,EAAA,UAAU,aAAcO,CAAU,EAE/B,OAAA,iBAAiBP,EAAI,OAAO,iBAAkB,CACjD,aAAc,CACV,KAAM,CACF,OAAOG,EAAK,YAAY,KAAA,CAEhC,EACA,QAAS,CACL,KAAM,CACK,OAAAA,EAAK,KAAK,MAAM,MAAA,CAC3B,CACJ,CACH,EACGpB,EAAM,YACN,MAAMA,EAAM,WAAW,CACnB,IAAAiB,EACA,OAAAF,EACA,SAAUU,CAAA,CACb,EAME,CAAE,IAAAR,EAAK,OAAAF,EAAQ,KAAAK,CAAK,CAC/B,CACA,SAASF,GAAS,CACd,OACMQ,EAAaxB,CAAY,CAEnC,CACA,SAASc,GAAY,CACjB,IAAIW,EAAoBC,EACpBC,EACG,OAAAC,EAAcC,GAAS,CACtB,IAAAC,EAAeC,EAAWF,CAAI,EAC9BG,EAAa,KACjB,OAAIF,IACIL,IACcE,EAAAG,IAKdL,GAAqBE,IAAgBG,KACtBA,EAAAA,EAAa,QAAQ,QAAS,UAAU,GAgB1CE,EAAA,OAAwBF,IAGzCJ,IACoBD,EAAA,IAEjBO,CAAA,EACRlC,EAAM,QAAQ,CACrB,CACI4B,GACAd,EAAA,EAAY,KAAK,CAAC,CAAE,IAAAG,EAAK,OAAAF,EAAQ,KAAAK,KAAW,CAEjCL,EAAA,KAAK,KAAK,IAAM,CAELoB,EAAApB,EAAO,MAAOK,EAAK,IAAI,EACrCH,EAAI,MAAM,MAAM,CAOhB,CACH,CAAA,CACJ","x_google_ignoreList":[0]}